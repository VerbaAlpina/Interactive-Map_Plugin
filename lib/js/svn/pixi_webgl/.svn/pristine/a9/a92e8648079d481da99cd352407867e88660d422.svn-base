
 function LeafletPixiOverlay(map,_markerhover,_polyhover) { 

				that = this;

				var frame = null;
				var firstDraw = true;
				var prevZoom;
				var fixed_scale;
				var map_moving = false;
				var zooming = false;
				var window_width = window.outerHeight;
				var window_height = window.innerHeight;
				var mouseonmarker = false;
				var mouseonpolygon = false;
				var giant_listeners_initialized = false;
			    var currentPolygonID = 0;	
			    var hovered_markers = [];


			    var resetSwitch = false;

				var all_line_vertices = [];
				var all_line_thick_vertices = [];
				var all_thick_normals = [];
				var all_line_colors = [];
				var all_thick_line_colors = [];

				var all_poly_vertices = [];
				var all_poly_colors = [];
				var all_poly_alphas = [];
				var all_poly_ids = [];
				var all_thickline_ids = [];
				var all_thickhover_linewidths = [];

				var custom_uniforms = {};
				var excluded_candidates = [];

				var polyshader;
				var lineshader;
				var thicklineshader;
				var gl;

				this.markerhover = _markerhover;
				this.polyhover = _polyhover;
				this.piximarkers = new Array();
				this.pixipolygons = [];
				this.pixilines = [];
				this.renderer;
				this.container;
				this.external_scale =0.6;
				this.scale;
				this.project;
				this.active_polygon = null;
				this.current_latlng = null;
				this.current_mousepos = null;
				this.current_symbol_index;
				this.current_marker = null;
				this.multiPolygonList = {};
				this.alreadychecking_out = false;
				this.performing_unhover = false;
				this.globalTragetscale;
				this.globalCurrentScale; 
				this.globalMarkerScale;

				this.pixiContainer = new PIXI.Container();

				this.polyContainer = new PIXI.Container();
				this.markerContainer = new PIXI.Container({sortableChildren:true});
				this.lineContainer = new PIXI.Container();

			    this.pixiContainer.addChild(this.polyContainer);
		        this.pixiContainer.addChild(this.lineContainer);
				this.pixiContainer.addChild(this.markerContainer);


				custom_uniforms['poly_id'] = 1.0;
				custom_uniforms['current_zoom'] = map.getZoom();

				map.on('zoomstart', function(){
			     correctBadMarkers();
				map_moving = true;
				zooming = true;
				});


				map.on("mouseout", function(){
					that.resetHover();
				})

				map.on("mouseover", function(e){

					 that.current_latlng = e.latlng;
					 that.current_mousepos = e.containerPoint;

					  	if(!map_moving && that.current_latlng){
							completePolygonCheckBB(that.current_latlng);
						}
					 	 
				})

				map.on('zoomend', function(){
				
					custom_uniforms['current_zoom'] = map.getZoom();

					setTimeout(function() {
			   			 map_moving = false;
			   			 zooming = false;
		   			 	 that.active_polygon = null;
						if(custom_uniforms)custom_uniforms.poly_id = 0.0;
		   			 	if(that.current_latlng)completePolygonCheckBB(that.current_latlng);
			   	 }, 300);
					
				

				});

				map.on('move', function(e){
				correctBadMarkers();
				map_moving = true;
				});

				map.on('moveend', function(e){
					if(!zooming)map_moving = false;
				});


				var null_counter = 0;

				map.on('mousemove', function(e){

					 that.current_latlng = e.latlng;
					 that.current_mousepos = e.containerPoint;

					  	if(!map_moving){
							completePolygonCheckBB(that.current_latlng);
						}


						  if(that.active_polygon!=null){
						  	  jQuery('body').addClass("mouse_on_polygon");
						  	  null_counter=0;
						  }

						  else{
						  	null_counter++;
						  	if(null_counter>2)jQuery('body').removeClass("mouse_on_polygon");
				  		  	if(null_counter>5)null_counter=3;
						  }

						  if(mouseonmarker && !jQuery('#map').hasClass('mo_marker'))jQuery('#map').addClass('mo_marker');
						  else if(!mouseonmarker && jQuery('#map').hasClass('mo_marker')) jQuery('#map').removeClass('mo_marker')

				});

		



				var doubleBuffering = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;

		
				this.LpixiOverlay = L.pixiOverlay(function(utils) {


					gl;
					var canvas = jQuery(that.LpixiOverlay._container).find("canvas")[0];
					var gl2 = canvas.getContext("webgl2");
					var gl1 = canvas.getContext("webgl");

					if (gl2) gl = gl2;
					else gl = gl1;

					if(!gl){
						alert("WEBGL COULD NOT BE INITIALIZED, PLEASE MAKE SURE WEBGL IS ENABLED IN YOUR BROWSER.")
					}

					//gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);	

					if (frame) {
						cancelAnimationFrame(frame);
						frame = null;
					}

					var zoom = utils.getMap().getZoom();
					that.container = utils.getContainer();
					that.renderer = utils.getRenderer();
					that.project = utils.latLngToLayerPoint;
					that.scale = utils.getScale();
					that.scale /= that.external_scale;

					if (firstDraw) {
						var getRenderer = utils.getRenderer;

						utils.getMap().on('click', function(e) {

							var interaction = utils.getRenderer().plugins.interaction;
							var pointerEvent = e.originalEvent;	
							var pixiPoint = new PIXI.Point();

							interaction.mapPositionToPoint(pixiPoint, pointerEvent.clientX, pointerEvent.clientY);

							var target = interaction.hitTest(pixiPoint, that.container);

							if(!target && that.active_polygon!=null) target=that.active_polygon;


							if(target && (target.type =="gl_Marker" || target.type=="pixi_polygon") ){ //prevent click if clicked element is not canvas
								if(!zooming && ! map_moving) target.clickListener(e.latlng.lat,e.latlng.lng);
							}

						 });

						that.globalCurrentScale = 1 / that.scale;

		
					}
					if (!firstDraw && prevZoom !== zoom) {
						
						
					   if(that.piximarkers.length>0){
									that.globalTragetscale  =  1 / that.scale;
						}
				

					}

					var duration = 250;
					var start;


	function animate(timestamp) {
				var progress;

		

				if (start === null) start = timestamp;
				progress = timestamp - start;
				var lambda = progress / duration;
				if (lambda > 1) lambda = 1;
				lambda = lambda * (0.4 + lambda * (2.2 + lambda * -1.6));

				that.globalMarkerScale = (that.globalCurrentScale + lambda * (that.globalTragetscale - that.globalCurrentScale));

				for(var i=0; i<that.piximarkers.length;i++){
					var marker = that.piximarkers[i];
					marker.scale.set(that.globalCurrentScale + lambda * (that.globalTragetscale - that.globalCurrentScale));
				}

		
				if (progress < duration) {
					frame = requestAnimationFrame(animate);
				}

				else{

					that.globalCurrentScale = 1/ that.scale;

					var zoom = map.getZoom();
					if(zoom<2)zoom = 2;

					//var line_width_fac = that.scale + (1/zoom)/25;
					//var new_linewidth = that.pixipolygons[0]['line_width'] / (line_width_fac); //assume all polygons use same linewidth
				
				    //	that.renderer.render(that.container); 
	
				}

			 that.renderer.render(that.container); // render after zoom
			} //animate		

			if (!firstDraw && prevZoom !== zoom) {
				
				// that.polyContainer.cacheAsBitmap = true;
			     start = null;
				
				frame = requestAnimationFrame(animate);
			}

			firstDraw = false;
			prevZoom = zoom;
			that.renderer.render(that.container); // render for pan
			},
			this.pixiContainer,
			 {
			  doubleBuffering: doubleBuffering,
		      autoPreventDefault: false
		    }
	);


this.pixiLine = function(_in){



var line = new Object();

	var latlng = _in.geo['coordinates'][0]; //!CHECK IF LINE GEOMETRY IS HERE! WHEN REAL LINES COME
	line['latlng'] = latlng;
	line['orig_object'] = _in.geo;
	line['line_width'] = _in.line_width;
	line['fill_color'] = _in.fill_color;
	line['fill_alpha'] = _in.fill_alpha;
	line['popupcontent'] = _in.popupcontent;
	line['stroke_color'] = _in.stroke_color;
	line['stroke_alpha'] = _in.stroke_alpha;
	line['hover_line_width'] = _in.hover_line_width;
	line['hover_stroke_color'] = _in.hover_stroke_color;
	line['hover_stroke_alpha'] = _in.hover_stroke_alpha;
	line['clickListener'] = _in.clicklistener;
	line['map_shape'] = _in.map_shape;

		


	var projectedLine = latlng.map(function(coords) {return that.project(coords);});
	var coords_array = [];




	for(var i=0; i<projectedLine.length;i++){
       coords_array.push(projectedLine[i].x);
       coords_array.push(projectedLine[i].y);

	}


	line['coords_array'] = coords_array;

	line['type'] = "gl_Line";

	that.pixilines.push(line);


return line;

}



this.pixiMarker = function(_in){


	var marker = new PIXI.Sprite(_in.texture);
	marker['orig_options'] = _in;
	marker.clickListener = _in.clickListener;


	marker.alpha = _in.alpha;
	marker.zIndex = _in.zIndex;

	var markerCoords = that.project(_in.latlng);
	marker.x = markerCoords.x;
	marker.y = markerCoords.y;
	marker.anchor.set(0.5, 0.5);
	marker.scale.x = that.globalCurrentScale;
	marker.scale.y = that.globalCurrentScale;

	marker.currentScale = 1 / that.scale;

	marker['latlng'] = _in.latlng;
	marker['content'] = _in.popupcontent;

	marker.interactive = _in.interactive;

	if(that.markerhover){

		var animate_running = false;
		var add = true;
		var original_scale;
		var targetScale;
		var diff;
		marker.upscale = false;

	 	marker.on('mouseover',function(e){
	 	
 		  correctBadMarkers();

 		  jQuery(".leaflet-pane.leaflet-marker-pane > div").addClass('old')

 		  setTimeout(function() {
 		  	   jQuery(".leaflet-pane.leaflet-marker-pane > div.old").remove();
 		  }, 150);
 		


	 		mouseonmarker = true;
	 		that.current_latlng = {lat:marker.latlng[0], lng:marker.latlng[1]};

	 		if(!marker['multi_symbol_layout'])createAliasHover(marker,false);
	 		else createAliasHover(marker,true);

	 
		    function createAliasHover(marker,multi){

       		if(!map_moving){

				that.current_symbol_index = null;
				that.current_marker = marker;


		 		if(!multi){
		 		
			  		if(that.current_marker===marker && !zooming)createAliasMarker(marker,false)
			  
		 		}

		 		else{

	 			  	marker.on('mousemove',function(e){
	 			  		
			  		if(that.current_marker===marker && !zooming)createAliasMarker(marker,true);
			  		
       			  	});
						
		 		}

		 	
	 		}

       }


       function createAliasMarker(marker,multi){




       			  if(multi){


			 			mouspos = that.current_mousepos;
			 			var symbolpos_in_div_px = map.latLngToContainerPoint(L.latLng( marker.latlng[0], marker.latlng[1]));
			 			var layout = marker['multi_symbol_layout'];

			 			var symbol_index = layout.computeIndexFromMousePosition(
				 				symbolpos_in_div_px.x,
				 				symbolpos_in_div_px.y,
				 				mouspos.x,
				 				mouspos.y,
				 				that.external_scale
			 				);
		 				if(symbol_index===that.current_symbol_index)return;

		 				if(symbol_index=="out"){
								marker.off('mousemove',createAliasMarker);
								that.current_marker = null;
								that.current_symbol_index = null;
								return;    
		 				}
		 				
			 		}	

		 			if(symbol_index!==false || !multi){


		 		

		 				var icon; 
						var img_url;
						var tex_height;
						var latlng;

						if(multi){
			 			 icon = layout.getIcon(symbol_index);
			 			 img_url = icon.toDataURL();
						 tex_height = icon.height*that.external_scale;


						 var symbol_pixelpos_x = (symbolpos_in_div_px.x - layout.getWidth(that.external_scale)*0.5) + layout.getXPosition(symbol_index, that.external_scale) + tex_height * 0.5;
						 var symbol_pixelpos_y = (symbolpos_in_div_px.y - layout.getHeight(that.external_scale)*0.5) + layout.getYPosition(symbol_index, that.external_scale) + tex_height * 0.5;

						 latlng = map.containerPointToLatLng(L.point(symbol_pixelpos_x, symbol_pixelpos_y));

						 }

						 else{	
						 	var source = marker.texture.baseTexture.resource.source;

						 	if(source.nodeName=="IMG") img_url = getBase64Image(source);

		 					else img_url = source.toDataURL();

				 			 tex_height = _in.texture.orig.height*that.external_scale;
				 			 latlng = marker.latlng;

				 			
				 			  marker.alpha = 0.0;
		 					 
		 					  hovered_markers.push(marker);

						 }
		
					 that.renderer.render(that.container);

					var larger_than_css_scale_fac = 1.4; //increase parent size for child img not to be cut off when scaled (due to hover) fac > 0.1 than css scale
					

					var icon = L.divIcon({
					iconUrl: img_url,
					iconSize:     [tex_height*larger_than_css_scale_fac, tex_height*larger_than_css_scale_fac], // size of the icon
					iconAnchor:   [(tex_height)/2*larger_than_css_scale_fac, (tex_height)/2*larger_than_css_scale_fac], // point of the icon which will correspond to marker's location
					html:"<img style= 'width :"+ tex_height +"px; height:"+ tex_height +"px;z-index:"+marker.zIndex+";' class='aliasmarker_on' src="+img_url+"></img>",
					className:"customLdivIcon"

					});

					var aliasmarker = L.marker(latlng, {icon: icon }).addTo(map);



					triggercount = 0;

					jQuery(aliasmarker._icon).on('mouseover',function(){
					triggercount++;
					});

					jQuery(aliasmarker._icon).trigger("mouseenter");

					setTimeout(function() {
						if(triggercount==1)mouseonmarker =false;
					}, 150);




					jQuery(aliasmarker._icon).on('mouseleave',function(e){
						
							 const index = hovered_markers.indexOf(marker);
								if (index > -1) {
								  hovered_markers.splice(index, 1);
							 };

						 	   marker.alpha = _in.alpha;

							  jQuery(this).one("webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend",
				                function(event) {
		                			
		                		
								     map.removeLayer(aliasmarker);
								     that.renderer.render(that.container);
							    	 jQuery(this).remove();    
							  });

					
							mouseonmarker = false;
							

							// setTimeout(function() {
							// 	marker.alpha = _in.alpha;
							// 	jQuery(this).removeClass('animating');	
							// 	map.removeLayer(aliasmarker);
							// 	jQuery(".leaflet-pane.leaflet-marker-pane > div:not(:last)").remove()
							// 	that.renderer.render(that.container); 
							// }, 150);

							// setTimeout(function() {
							// //savety check 
							// if(!mouseonmarker && !mouseonpolygon){
							// 	that.active_polygon = null;
							// 	jQuery(".leaflet-pane.leaflet-marker-pane > div:not(:last)").remove()
							// 	}
							// }, 200);


					});


			}		

			if(multi && symbol_index!==false) that.current_symbol_index = symbol_index;

       }

	 		   
	});	


		var start;
		var duration = 100;

}

	marker['type'] = "gl_Marker";

	that.piximarkers.push(marker);

	return marker;
}


this.updateMarker = function(marker,_in){
	
	 if(_in.latlng) {

	 	marker['latlng'] = _in.latlng;
		var markerCoords = that.project(marker.latlng);
		marker.x = markerCoords.x;
		marker.y = markerCoords.y;

	}

	if(_in.texture) marker['texture'] = _in.texture;

	if(_in.popupcontent){

			marker['content'] = _in.popupcontent;
			var tex_height = marker.texture.orig.height*that.external_scale;
			marker.popup.setContent(_in.popupcontent);
			if(_in.latlng) marker.popup.setLatLng(_in.latlng);
	 }

	 if(_in.alpha) marker['alpha'] = _in.alpha;


};	



this.removeMarker = function(marker){

		var index = that.piximarkers.indexOf(marker);

		if (index > -1) {
			that.piximarkers.splice(index, 1);
		}

};


// needs defined geo object
// {type: MultiPolygon | Polygon, coordinates: [[]] | [], idx: some unique id}

this.gLPolygon = function(_in){

var obj = [];
var in_obj = {};

if(_in.geo) in_obj['geo'] = _in.geo;
if(_in.center) in_obj['center'] = _in.center;
if(_in.line_width) in_obj['line_width'] = _in.line_width;
if(_in.fill_color) in_obj['fill_color'] = _in.fill_color;
if(_in.fill_alpha) in_obj['fill_alpha'] = _in.fill_alpha;
if(_in.stroke_color) in_obj['stroke_color'] = _in.stroke_color;
if(_in.stroke_alpha) in_obj['stroke_alpha'] = _in.stroke_alpha;
if(_in.popupcontent) in_obj['popupcontent'] = _in.popupcontent;
if(_in.interactive) in_obj['interactive'] = _in.interactive;
if(_in.hover_line_width) in_obj['hover_line_width'] = _in.hover_line_width;
if(_in.hover_fill_color) in_obj['hover_fill_color'] = _in.hover_fill_color;
if(_in.hover_fill_alpha) in_obj['hover_fill_alpha'] = _in.hover_fill_alpha;
if(_in.hover_stroke_color) in_obj['hover_stroke_color'] = _in.hover_stroke_color;	 
if(_in.hover_stroke_alpha) in_obj['hover_stroke_alpha'] = _in.hover_stroke_alpha;	
if(_in.clickListener) in_obj['clickListener'] = _in.clickListener;	
if(_in.map_shape) in_obj['map_shape'] = _in.map_shape;	


	

	if(_in.geo['type']=="Polygon"){

    	var latlng = _in.geo['coordinates'][0];

    	var holes = [];
    	for(var j=1; j<_in.geo['coordinates'].length;j++){
    		var hole = _in.geo['coordinates'][j];
    	     holes.push(hole);  
    	}


	     var polygon = new that.pixiPolygon(
	       latlng,
	       in_obj.geo,
	       in_obj.center,
	       in_obj.line_width,
	       in_obj.fill_color,
	       in_obj.fill_alpha,
	       in_obj.stroke_color,
	       in_obj.stroke_alpha,
	       in_obj.popupcontent,
	       in_obj.interactive,
		   in_obj.hover_line_width,
		   in_obj.hover_fill_color,
		   in_obj.hover_fill_alpha,
		   in_obj.hover_stroke_color,
   		   in_obj.hover_stroke_alpha,
   		   in_obj.clickListener,
   		   in_obj.map_shape,
   		   holes
	       );

	     polygon['orig_options'] = _in;
	     obj.push(polygon);
	 }

		if(_in.geo['type']=="MultiPolygon"){

		var coords_list = _in.geo['coordinates'];

		for(var i=0; i<coords_list.length;i++){
			var latlng = coords_list[i][0];

		var holes = [];


    	for(var j=1; j<coords_list[i].length;j++){
    		var hole = coords_list[i][j]
    		if(hole.length>3)holes.push(hole); //dont use amall bugged holes
    	}	
	   	

		var polygon = new that.pixiPolygon(
	    	 latlng,
	       in_obj.geo,
	       in_obj.center,
	       in_obj.line_width,
	       in_obj.fill_color,
	       in_obj.fill_alpha,
	       in_obj.stroke_color,
	       in_obj.stroke_alpha,
	       in_obj.popupcontent,
	       in_obj.interactive,
		   in_obj.hover_line_width,
		   in_obj.hover_fill_color,
		   in_obj.hover_fill_alpha,
	       in_obj.hover_stroke_color,
	       in_obj.hover_stroke_alpha,
           in_obj.clickListener,
           in_obj.map_shape,
	       holes
		    );

		  polygon['orig_options'] = _in;
		  obj.push(polygon);
		}

	}

	obj['type'] = "gl_Polygon";
	return obj;
};


this.pixiPolygon = function(latlng,orig_object,center,line_width,fill_color,fill_alpha,stroke_color,stroke_alpha,popupcontent,interactive,hover_line_width,hover_fill_color,hover_fill_alpha,hover_stroke_color,hover_stroke_alpha,clicklistener,map_shape,holes){
 		
	var pixi_polygon = new Object();

	pixi_polygon['type'] = "pixi_polygon";

	pixi_polygon.alpha = fill_alpha;

	pixi_polygon['idx'] = currentPolygonID;
	currentPolygonID ++;


	var projectedPolygon =latlng.map(function(coords) {return that.project(coords);});
	var coords_array = [];

	for(var i=0; i<projectedPolygon.length;i++){

       coords_array.push(projectedPolygon[i].x);
       coords_array.push(projectedPolygon[i].y);

	}

	//only allow polygons with even number of vertices
	 // if((coords_array.length/2)%2>0){
	 // 		coords_array.push(coords_array[0])
	 // 		coords_array.push(coords_array[1])
	 // }

	pixi_polygon['coords_array'] = coords_array;

	var totalholes = [];

	for(var i = 0; i<holes.length;i++){
		var hole_coords = []
		var hole = holes[i];

		var projectedHole = hole.map(function(coords) {return that.project(coords);});

		for(var j=0; j<projectedHole.length;j++){
			hole_coords.push(projectedHole[j].x)
			hole_coords.push(projectedHole[j].y)
		}
		totalholes.push(hole_coords);
	}





	pixi_polygon['totalholes'] = totalholes;

	pixi_polygon['latlng'] = latlng;
	pixi_polygon['orig_object'] = orig_object;
	pixi_polygon['center'] = center;
	pixi_polygon['line_width'] = line_width;
	pixi_polygon['fill_color'] = fill_color;
	pixi_polygon['fill_alpha'] = fill_alpha;
	pixi_polygon['popupcontent'] = popupcontent;
	pixi_polygon['stroke_color'] = stroke_color;
	pixi_polygon['stroke_alpha'] = stroke_alpha;
	pixi_polygon['original_line_width'] = line_width;
	pixi_polygon['original_fill_color'] = fill_color;
	pixi_polygon['original_fill_alpha'] = fill_alpha;
	pixi_polygon['original_stroke_color'] = stroke_color;
	pixi_polygon['original_stroke_alpha'] = stroke_alpha;
	pixi_polygon['hover_line_width'] = hover_line_width;
	pixi_polygon['hover_fill_color'] = hover_fill_color;
	pixi_polygon['hover_fill_alpha']= hover_fill_alpha;
	pixi_polygon['hover_stroke_color'] = hover_stroke_color;
	pixi_polygon['hover_stroke_alpha'] = hover_stroke_alpha;
	pixi_polygon['clickListener'] = clicklistener;
	pixi_polygon['map_shape'] = map_shape;
	pixi_polygon['holes'] = holes;

	that.pixipolygons.push(pixi_polygon);

	if(pixi_polygon.orig_object.boundingBox){

		var orig_box = pixi_polygon.orig_object.boundingBox;

	     var topLeft = {lat: orig_box[1],lng:orig_box[0]};
	     var bottomRight = {lat: orig_box[3],lng:orig_box[2]};
	     var bottomLeft =  {lat: orig_box[3],lng:orig_box[0]};
	     var topRight =  {lat: orig_box[1],lng:orig_box[2]};

	     var bBox = [topLeft,topRight,bottomRight,bottomLeft];

	     pixi_polygon['bBox'] = bBox;
     }

	if(orig_object.type=="MultiPolygon"){

		var idx = orig_object['idx'];

		if(that.multiPolygonList[idx]==null){
			that.multiPolygonList[idx] = [pixi_polygon];
		}
		else{
			that.multiPolygonList[idx].push(pixi_polygon);
		}
	}

	return pixi_polygon;

};


// IF UPDATE GEOMETRY USE SAME NUMBER OF POLYGONS
// NO CHANGE FROM MULTIPOLYGON TO POLYGON ALLOWED
// IN THAT CASE REMOVE POLYGON AND CREATE NEW

this.updatePolygon = function(gl_polygon,_in){


var update_obj= {};

(_in.geo) ? update_obj['geo'] = _in.geo :	update_obj['geo'] = gl_polygon.geo;
(_in.center) ? update_obj['center'] = _in.center :	update_obj['center'] = gl_polygon.center;
(_in.line_width) ? update_obj['line_width'] = _in.line_width :	update_obj['line_width'] = gl_polygon.line_width;
(_in.fill_color) ? update_obj['fill_color'] = _in.fill_color :	update_obj['fill_color'] = gl_polygon.fill_color;
(_in.fill_alpha) ? update_obj['fill_alpha'] = _in.fill_alpha :	update_obj['fill_alpha'] = gl_polygon.fill_alpha;
(_in.stroke_color) ? update_obj['stroke_color'] = _in.stroke_color :	update_obj['stroke_color'] = gl_polygon.stroke_color;
(_in.stroke_alpha) ? update_obj['stroke_alpha'] = _in.stroke_alpha :	update_obj['stroke_alpha'] = gl_polygon.stroke_alpha;
(_in.popupcontent) ? update_obj['popupcontent'] = _in.popupcontent :	update_obj['popupcontent'] = gl_polygon.popupcontent;
(_in.interactive) ? update_obj['interactive'] = _in.interactive :	update_obj['interactive'] = gl_polygon.interactive;
(_in.hover_line_width) ? update_obj['hover_line_width'] = _in.hover_line_width :	update_obj['hover_line_width'] = gl_polygon.hover_line_width;
(_in.hover_fill_color) ? update_obj['hover_fill_color'] = _in.hover_fill_color :	update_obj['hover_fill_color'] = gl_polygon.hover_fill_color;
(_in.hover_fill_alpha) ? update_obj['hover_fill_alpha'] = _in.hover_fill_alpha :	update_obj['hover_fill_alpha'] = gl_polygon.hover_fill_alpha;
(_in.hover_stroke_color) ? update_obj['hover_stroke_color'] = _in.hover_stroke_color :	update_obj['hover_stroke_color'] = gl_polygon.hover_stroke_color;
(_in.hover_stroke_alpha) ? update_obj['hover_stroke_alpha'] = _in.hover_stroke_alpha :	update_obj['hover_stroke_alpha'] = gl_polygon.hover_stroke_alpha;


	if(gl_polygon.length>1){

		for(var i=0; i<gl_polygon.length;i++){
			if(_in.geo) var latlng = _in.geo['coordinates'][i];
			that.updateSinglePolygon(gl_polygon[i],latlng,update_obj.geo,update_obj.center,update_obj.line_width,update_obj.fill_color,update_obj.fill_alpha,update_obj.stroke_color,update_obj.stroke_alpha,update_obj.popupcontent,update_obj.interactive);
		}
	}

	else{
	    if(_in.geo) var latlng = _in.geo['coordinates'][0];
		that.updateSinglePolygon(gl_polygon[0],latlng,update_obj.geo,update_obj.center,update_obj.line_width,update_obj.fill_color,update_obj.fill_alpha,update_obj.stroke_color,update_obj.stroke_alpha,update_obj.popupcontent,update_obj.interactive);
	}


};



this.updateSinglePolygon = function(polygon,latlng,orig_object,center,line_width,fill_color,fill_alpha,stroke_color,stroke_alpha,popupcontent,interactive,hover_line_width,hover_fill_color,hover_fill_alpha,hover_stroke_color,hover_stroke_alpha){

	
	if(latlng)polygon['latlng'] = latlng;
	if(orig_object)polygon['orig_object'] = orig_object;
	if(center)polygon['center'] = center;
	if(line_width)polygon['line_width'] = line_width;
	if(fill_color)polygon['fill_color'] = fill_color;
	if(fill_alpha)polygon['fill_alpha'] = fill_alpha;
	if(stroke_color)polygon['stroke_color'] = stroke_color;
	if(stroke_alpha)polygon['stroke_alpha'] = stroke_alpha;
	if(line_width)polygon['original_line_width'] = line_width;
	if(fill_color)polygon['original_fill_color'] = fill_color;
	if(fill_alpha)polygon['original_fill_alpha']= fill_alpha;
	if(stroke_color)polygon['original_stroke_color'] = stroke_color;
	if(stroke_alpha)polygon['original_stroke_alpha'] = stroke_alpha;
	if(interactive)polygon['interactive'] = interactive;
	if(hover_line_width)polygon['hover_line_width'] = hover_line_width;
	if(hover_fill_color)polygon['hover_fill_color'] = hover_fill_color;
	if(hover_fill_alpha)polygon['hover_fill_alpha'] = hover_fill_alpha;
	if(hover_stroke_color)polygon['hover_stroke_color'] = hover_stroke_color;
	if(hover_stroke_alpha)polygon['hover_stroke_alpha'] = hover_stroke_alpha;

	if(popupcontent && center){
			polygon.popup = L.popup({className: 'pixi-popup', autoClose:false})
			.setLatLng(center)
			.setContent(popupcontent);
	}	

	that.addPixiPolygonToBuffers(polygon,false);

};

this.removePolygonOrLine = function(overlay){

	if(overlay.length>1 && overlay.type =="gl_Polygon"){

		for(var i=0; i<overlay.length;i++){
			that.deleteSinglePolygon(overlay[i]);
		}

		var idx = overlay[0].orig_object.idx;
		delete that.multiPolygonList[idx];
	}

	else if(overlay.type=="gl_Polygon"){
		that.deleteSinglePolygon(overlay[0]);
	}

	else if(overlay.type == "gl_Line"){

		this.deleteSingleLine(overlay);
	}


};

this.deleteSinglePolygon = function(polygon){


		var index = that.pixipolygons.indexOf(polygon);

		if (index > -1) {
			that.pixipolygons.splice(index, 1);
		}
		
};

this.deleteSingleLine = function(line){

		var index = that.pixilines.indexOf(line);

		if (index > -1) {
			that.pixilines.splice(index, 1);
		}

}



this.addPixiPolygonToBuffers = function(pixipolygon,hole){

	  var line_array =  [];
	  var coords_array = pixipolygon.coords_array;
	  if(hole) coords_array = hole;

	     if(pixipolygon.line_width>1) {
	
	     	line_array = getThickLineArray(coords_array,pixipolygon.line_width);

	     	    for(var i=0; i<line_array.length;i++){
	    			all_line_thick_vertices.push(line_array[i]);
			 
		    			if(i%2==0){
		    				var id = pixipolygon.orig_object.idx;
			    			all_thickline_ids.push(parseFloat(id));
			    			all_thickhover_linewidths.push(pixipolygon['hover_line_width']);
		    			}
			    		 

   			 	}

	     }

	     else{
	     	line_array = getLineArray(coords_array);
	     	 for(var i=0; i<line_array.length;i++){
	    			all_line_vertices.push(line_array[i]);
   			 	}
	     }



	    for(var i=0; i<line_array.length;i+=2){
	    			var rgb = hexToRgb(pixipolygon['stroke_color']);
	
	    			if(pixipolygon['stroke_color']=="")rgb = hexToRgb("0x000000");
	    		
	    			var single_float = packColor(rgb);
			        if(pixipolygon.line_width>1)all_thick_line_colors.push(single_float);
	    			else all_line_colors.push(single_float);


	    }

    if(((pixipolygon.orig_object.type == "MultiPolygon" || pixipolygon.orig_object.type == "Polygon") && !hole)&& pixipolygon.fill_alpha > 0.0){


		var triangles = getPolyTriangles(coords_array,pixipolygon.totalholes);

		//add vertices, x,y

			for(var i=0; i<triangles.length;i++){
				all_poly_vertices.push(triangles[i]);
			}


	    	for(var i=0; i<triangles.length;i+=2){

	    				//add color

		    			var rgb = hexToRgb(pixipolygon['fill_color']);

		    			if(pixipolygon['fill_color']=="")rgb = hexToRgb("0x000000");

		    			var single_float = packColor(rgb);
		    			all_poly_colors.push(single_float);

		    			//add alpha(s)

	  					var alpha = pixipolygon['fill_alpha'];
		    			var hover_alpha = pixipolygon['hover_fill_alpha']

		    			var r = alpha*256;
		    			var g = hover_alpha*256;
		    			if(r==256) r= 255;
		    			if(g==256) g = 255;

		    			var fake_rgb = {r:r,g:g,b:0.0} //b still free (range 0-255)

		    			var single_float = packColor(fake_rgb);
		    			all_poly_alphas.push(single_float);

		    			//add id

		    			var id = pixipolygon.orig_object.idx;
		    			all_poly_ids.push(parseFloat(id));

		    }

   }	    

};





function hexToRgb(hex) {
  var result = /^0x?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
  return result ? {
    r: parseInt(result[1], 16),
    g: parseInt(result[2], 16),
    b: parseInt(result[3], 16)
  } : null;
}


function getPolyTriangles(coords_array,holes){


	var total_coords = coords_array.slice();

	var coords_array_count = coords_array.length/2;

	var hole_indices = [];

		for(var i=0;i<holes.length;i++){
		 		var hole_coords = holes[i];
				total_coords.push.apply(total_coords, hole_coords);
				hole_indices.push(coords_array_count);
		 		coords_array_count+=hole_coords.length/2;
		}	


	var earcut_result;
	earcut_result = earcut(total_coords,hole_indices,2);
	
	var result = [];
	for(var i=0; i<earcut_result.length;i++){
		var idx = earcut_result[i]*2;
		var pointx = total_coords[idx];
		var pointy = total_coords[idx+1];
		result.push(pointx);
		result.push(pointy);
	}

	delete total_coords;

	return result;
}

function getLineArray(coords_array){
var res = [];

	for(var i =0; i<coords_array.length;i+=2){
		if(i==0){
			res.push(coords_array[i]);
			res.push(coords_array[i+1]);
		}



		else if(i==coords_array.length-2){
			 res.push(coords_array[i]);
			 res.push(coords_array[i+1]);

		}

		else{
			res.push(coords_array[i]);
			res.push(coords_array[i+1]);
			res.push(coords_array[i]);
			res.push(coords_array[i+1]);	
		}

	}

return res;
}


function getThickLineArray(coords_array,line_width){

var res1 = [];
var res2 = [];
var normals = [];

var origin_line = [];

	for(var i =0; i<coords_array.length-2;i+=2){

		var x1 = coords_array[i];
		var y1 = coords_array[i+1];
		var x2 = coords_array[i+2];
		var y2 = coords_array[i+3];

		if(!x2 && !y2){
			x2 = coords_array[0];
			y2 = coords_array[1];
		}

		origin_line.push(x1);
		origin_line.push(y1);
		origin_line.push(x2);
		origin_line.push(y2);

		var h = line_width;

		var n =  calculatePerpendicular(x1,x2,y1,y2,h);
		var q =  calculatePerpendicular(x1,x2,y1,y2,-h);


		res1.push(n.p1.x);
		res1.push(n.p1.y);
		res1.push(n.p2.x);
		res1.push(n.p2.y);

		//intersectpoints(res1);

		res2.push(q.p1.x);
		res2.push(q.p1.y);
		res2.push(q.p2.x);
		res2.push(q.p2.y);

		// intersectpoints(res2);

	}

// var res = res1.concat(res2); // For double lines (not triangles)

var res = [];

	for(var i=0; i<res1.length;i+=2){


			if(i%4==0 || i==0){

				var v1 = {};
				var v2 = {};
				var v3 = {};
				var v4 = {};

				var nextv1 = {};
				var nextv3 = {};

				v1.x = res2[i];
				v1.y = res2[i+1];
				v2.x = res2[i+2];
				v2.y = res2[i+3];
				v3.x = res1[i];
				v3.y = res1[i+1];
				v4.x = res1[i+2];
				v4.y = res1[i+3];

				if(res2[i+4]!=null && res2[i+5]!=null && res1[i+4]!=null && res1[i+5]!=null){

				nextv1.x = res2[i+4];
				nextv1.y = res2[i+5];

				nextv3.x = res1[i+4];
				nextv3.y = res1[i+5];

				}

				else{
					nextv1.x = res2[0];
					nextv1.y = res2[1];
					nextv3.x = res1[0];
					nextv3.y = res1[1];
				}


				res.push(v1.x); 
				res.push(v1.y); 

				res.push(v2.x); 
				res.push(v2.y); 

				res.push(v3.x);
				res.push(v3.y); 

				res.push(v2.x);
				res.push(v2.y);

				res.push(v4.x); 
				res.push(v4.y); 

				res.push(v3.x);  
				res.push(v3.y); 

	
				var x1 = origin_line[i];
				var y1 = origin_line[i+1];
				var x2 = origin_line[i+2];
				var y2 = origin_line[i+3];
				var nextx1 =  origin_line[i+4]; 
				var nexty1 =  origin_line[i+5]; 


				var n1x = v3.x - v1.x;
				var n1y = v3.y - v1.y;

				var n2x  = v4.x - v2.x;
				var n2y =  v4.x - v2.y;

				var n3x  = v1.x -  v3.x;
				var n3y =  v1.y -  v3.y;

				var n4x  =  v2.x - v4.x;
				var n4y  =  v2.x - v4.y;

	
				all_thick_normals.push(x1);
				all_thick_normals.push(y1);

				all_thick_normals.push(x2);
				all_thick_normals.push(y2);

				all_thick_normals.push(x1);
				all_thick_normals.push(y1);

				all_thick_normals.push(x2);
				all_thick_normals.push(y2);

				all_thick_normals.push(x2);
				all_thick_normals.push(y2);

				all_thick_normals.push(x1);
				all_thick_normals.push(y1);

				res.push(v2.x);
				res.push(v2.y);
				res.push(nextv1.x);
				res.push(nextv1.y);
				res.push(nextv3.x);
				res.push(nextv3.y);


				res.push(v2.x);
				res.push(v2.y);
				res.push(nextv3.x);
				res.push(nextv3.y);
				res.push(v4.x);
				res.push(v4.y);


				all_thick_normals.push(x2);
				all_thick_normals.push(y2);

				all_thick_normals.push(nextx1);
				all_thick_normals.push(nexty1);

				all_thick_normals.push(nextx1);
				all_thick_normals.push(nexty1);

				all_thick_normals.push(x2);
				all_thick_normals.push(y2);

				all_thick_normals.push(nextx1);
				all_thick_normals.push(nexty1);

				all_thick_normals.push(x2);
				all_thick_normals.push(y2);
			

			}


	}

	delete normals;
	delete res1;
	delete res2;

	return res;

}

function normalizeVector(vec){

var mag = Math.sqrt(Math.pow(vec.x,2)+Math.pow(vec.y,2));
return {x:vec.x/mag,y:vec.y/mag};

}


function intersectpoints(res){

	if(res.length%4==0 && res.length>=8){

			var x1 = res[res.length-8];
			var y1 = res[res.length-7];
			var x2 = res[res.length-6];
			var y2 = res[res.length-5];
			var x3 = res[res.length-4];
			var y3 = res[res.length-3];
			var x4 = res[res.length-2];
			var y4 = res[res.length-1];

			var new_p = line_intersect(x1,y1,x2,y2,x3,y3,x4,y4);
			if(new_p!=null){

			 // var testinter = line_intersect(0,0,1,1,2,0,2,4);
			 // console.log(testinter);

			res[res.length-6] = new_p.x;
			res[res.length-5] = new_p.y;

			res[res.length-4] = new_p.x;
			res[res.length-3] = new_p.y;

			}

		}

}


function line_intersect(x1, y1, x2, y2, x3, y3, x4, y4)
{
    var ua, ub, denom = (y4 - y3)*(x2 - x1) - (x4 - x3)*(y2 - y1);
    if (denom == 0) {
        return null;
    }
    ua = ((x4 - x3)*(y1 - y3) - (y4 - y3)*(x1 - x3))/denom;
    ub = ((x2 - x1)*(y1 - y3) - (y2 - y1)*(x1 - x3))/denom;
    return {
        x: x1 + ua * (x2 - x1),
        y: y1 + ua * (y2 - y1),
        seg1: ua >= 0 && ua <= 1,
        seg2: ub >= 0 && ub <= 1
    };
}



// function getIntersection (x1,y1,x2,y2,x3,y3,x4,y4){


// var xs = ( ((x4-x3)*(x2*y1-x3*y4)) - ((x2-x1)*(x4*y3-x3*y4)) ) / ( ((y4-y3)*(x2-x1))-((y2-y1)*(x4-x3)) );
// var ys = ( ((y1-y2)*(x4*y3-x3*y4)) - ((y3-y4)*(x2*y1-x1*y2)) ) / ( ((y3-y3)*(x2-x1))-((y2-y1)*(x4-x3)) );

// return {x:xs,y:ys};

// }

function calculatePerpendicular(x1,x2,y1,y2,dist){

	var d = {}; 	
	d.x = x2 - x1;
	d.y = y2 - y1;

	var len = Math.sqrt(Math.pow(d.x,2) + Math.pow(d.y,2));


	var u = {};
	u.x = d.x/len;
	u.y = d.y/len;


	var p = {};

	p.x = -u.y;
	p.y = u.x;

	var n = {};

	n.x = x1 + p.x * dist;
	n.y = y1 + p.y * dist;

	var s = {};

	s.x = n.x + d.x;
	s.y = n.y + d.y;

    return {p1:n, p2:s};

}


function getBase64Image(img) {
  var canvas = document.createElement("canvas");
  canvas.width = img.width;
  canvas.height = img.height;
  var ctx = canvas.getContext("2d");
  ctx.drawImage(img, 0, 0);
  var dataURL = canvas.toDataURL("image/png");
  return dataURL.replace(/^data:image\/(png|jpg);base64,/, "");
}



function completePolygonCheckBB(point){	


 var latlon = [point.lat,point.lng];
 var candidates = [];

 if(that.active_polygon==null){

	    for(var i=0; i<that.pixipolygons.length;i++){

	    	     var pixi_polygon = that.pixipolygons[i];
	    		 
	    		 if(pixi_polygon['bBox']){

					    if(inside(latlon,pixi_polygon['bBox'])){
			
			    			if(!containsObject(pixi_polygon,excluded_candidates)) candidates.push(pixi_polygon);
					    }
				}	    
					
	    }

	    if(candidates.length==0){
	    	if(resetSwitch)that.resetHover();
	    	that.active_polygon = null;
	    }

	    else{

		    	var in_at_least_one_poly = false;

			    for(var i=0; i<candidates.length;i++){

			        var candidate = candidates[i];
			  

			    	if(inside(latlon,candidate.latlng)){
				    		in_at_least_one_poly = true;
				    		that.active_polygon = candidate;
				    		performHover();
				    		resetSwitch = true;
			    		}
			    }

			    if(!in_at_least_one_poly){

			    	if(resetSwitch)that.resetHover();
			    	that.active_polygon=null;
			    


			    }
	    }

	 }
	 
	 else{


	 	 if(inside(latlon,that.active_polygon.latlng)){
	 	 	 
	 	 	var inhole = false;
	 	 	if(that.active_polygon.holes.length==0)excluded_candidates = [];

			for(var i=0; i<that.active_polygon.holes.length;i++){
				var hole = that.active_polygon.holes[i];

			    if(inside(latlon,hole)){
			    	inhole = true;
			    	if(!containsObject(that.active_polygon,excluded_candidates))excluded_candidates.push(that.active_polygon);
			    }
			}

			if(inhole || !inside(latlon,that.active_polygon.latlng)) that.active_polygon = null;
	 	 	 
	 	 }

	 	 else{	
	 	 		excluded_candidates=[];
	 	 		that.active_polygon = null
	 	 		// setTimeout(function() {
	 	 		// 	completePolygonCheckBB(that.current_latlng);
	 	 		// }, 200);
	 	 }


	 }   

	};


function containsObject(obj, list) {
    var i;
    for (i = 0; i < list.length; i++) {
        if (list[i] === obj) {
            return true;
        }
    }

    return false;
}


this.resetHover = function(){

	mouseonpolygon = false;
	mouseonmarker = false;

	resetSwitch = false;
	that.active_polygon = null;

	if(custom_uniforms)custom_uniforms.poly_id = 0.0;
	that.renderer.render(that.container); 

}


function packColor(color){
	 return color.r + color.g * 256.0 + color.b * 256.0 * 256.0;
}



function performHover(){

	if(that.active_polygon){
		custom_uniforms.poly_id = parseFloat(that.active_polygon.orig_object.idx);
		that.renderer.render(that.container); 
	}

}


function drawAllLines(){

	var line_geo = new PIXI.Geometry();
	var linebuffer = line_geo.addAttribute('position', all_line_vertices, 2);
	line_geo.addAttribute('color', all_line_colors, 1);

		const vertexSrc = `

		    precision highp float;

		    attribute vec2 position;
		    attribute float color;

		    uniform mat3 translationMatrix;
		    uniform mat3 projectionMatrix;

		    varying float vColor;


		    void main() {

		    	vec3 pos = projectionMatrix * translationMatrix * vec3(position, 1.0);

		        gl_Position = vec4(pos.x, pos.y, 0.0, 1.0);
		        vColor = color;
		    }`;


		const fragmentSrc = `

		    precision highp float;

		    varying float vColor;

	        vec3 unpackColor(float f) {
			    vec3 color;
			    color.b = floor(f / 256.0 / 256.0);
			    color.g = floor((f - color.b * 256.0 * 256.0) / 256.0);
			    color.r = floor(f - color.b * 256.0 * 256.0 - color.g * 256.0);
			    return color / 255.0;
			}


		    void main() {

		        gl_FragColor = vec4(unpackColor(vColor),1.0);
		    }

		    `;

        var grp = new PIXI.UniformGroup(custom_uniforms,false); 

		lineshader =  PIXI.Shader.from (vertexSrc, fragmentSrc,grp);

		var mesh =  new PIXI.Mesh(line_geo, lineshader,null, PIXI.DRAW_MODES.LINES);

	return mesh;

}


function drawAllThickLines(){

	var line_geo = new PIXI.Geometry();
	var linebuffer = line_geo.addAttribute('position', all_line_thick_vertices, 2);
	var normals = line_geo.addAttribute('normal',all_thick_normals,2);
	line_geo.addAttribute('id', all_thickline_ids, 1);
	line_geo.addAttribute('color', all_thick_line_colors, 1);
    line_geo.addAttribute('hover_width',all_thickhover_linewidths,1);

		const vertexSrc = `

		    precision highp float;

		    attribute vec2 position;
		    attribute vec2 normal;
		    attribute float color;
		    attribute float id;
		    attribute float hover_width;

		    uniform mat3 translationMatrix;
		    uniform mat3 projectionMatrix;

		    uniform float current_zoom;
	        uniform float poly_id;

		    varying float vColor;


		    void main() {

		    	vec3 pos = projectionMatrix * translationMatrix * vec3(position, 1.0);
		    	vec2 pos2 = vec2(pos.x,pos.y);
		    	vec3 target = projectionMatrix * translationMatrix * vec3(normal, 1.0);
		    	vec2 t = vec2(target.x,target.y);
		    	vec2 norm = (t - pos2);

		    	float dist = distance(normal,position);
		    	float distscale = distance(t,pos2);

		    	float pixelwidth = 256.0/(pow(2.0,current_zoom));

		      // if(id==poly_id) pixelwidth = (pixelwidth*hover_width) ;

		       gl_Position = vec4(pos.x+(norm.x*(1.0-pixelwidth)), pos.y+(norm.y*(1.0-pixelwidth)), 0.0, 1.0);

		      // gl_Position = vec4(pos.x, pos.y, 0.0, 1.0);

		        vColor = color;
		    }`;


		const fragmentSrc = `

		    precision highp float;

		    varying float vColor;

	        vec3 unpackColor(float f) {
			    vec3 color;
			    color.b = floor(f / 256.0 / 256.0);
			    color.g = floor((f - color.b * 256.0 * 256.0) / 256.0);
			    color.r = floor(f - color.b * 256.0 * 256.0 - color.g * 256.0);
			    return color / 255.0;
			}


		    void main() {

		        gl_FragColor = vec4(unpackColor(vColor),1.0);
		    }

		    `;

        var grp = new PIXI.UniformGroup(custom_uniforms,false); 

		thicklineshader =  PIXI.Shader.from (vertexSrc, fragmentSrc,grp);

		var mesh =  new PIXI.Mesh(line_geo, thicklineshader,null, PIXI.DRAW_MODES.TRIANGLES);

	return mesh;

}


function drawAllPolygons(){

	var poly_geo = new PIXI.Geometry();
	poly_geo.addAttribute('position', all_poly_vertices, 2);
	poly_geo.addAttribute('color', all_poly_colors, 1);
	poly_geo.addAttribute('alpha', all_poly_alphas, 1);
	poly_geo.addAttribute('id', all_poly_ids, 1);

		const vertexSrc = `

		    precision highp float;

		    attribute vec2 position;
		    attribute float color;
		    attribute float alpha;
		    attribute float id;

		    uniform mat3 translationMatrix;
		    uniform mat3 projectionMatrix;
	        uniform float poly_id;

		    varying float vColor;
		    varying float vAlpha;
		    varying float vId;

		    void main() {

		    	gl_PointSize = 10.0;
		        gl_Position = vec4((projectionMatrix * translationMatrix * vec3(position, 1.0)).xy, 0.0, 1.0);
		        vColor = color;
		        vAlpha = alpha;
		        vId = floor(id);
		    }`;


		const fragmentSrc = `

		    precision highp float;

		    varying float vColor;
		    varying float vAlpha;
		    varying float vId;

	        uniform float poly_id;

	        vec3 unpackColor(float f) {
			    vec3 color;
			    color.b = floor(f / 256.0 / 256.0);
			    color.g = floor((f - color.b * 256.0 * 256.0) / 256.0);
			    color.r = floor(f - color.b * 256.0 * 256.0 - color.g * 256.0);
			    return color / 255.0;
			}


		    void main() {
		    	vec3 color = unpackColor(vColor);
		    	vec3 alpha = unpackColor(vAlpha);
		    	float fill_alpha = alpha.r;
		    	float hover_alpha = alpha.g;

		    	if(poly_id == vId){
		          gl_FragColor = vec4(color,1.0)*hover_alpha;
		    	}
		    	else{
			        gl_FragColor = vec4(color,1.0)*fill_alpha;
		    	}


		    }

		    `;


	    var grp = new PIXI.UniformGroup(custom_uniforms,false); 
		    
		polyshader =  PIXI.Shader.from (vertexSrc, fragmentSrc,grp);

		var mesh =  new PIXI.Mesh(poly_geo, polyshader,null, PIXI.DRAW_MODES.TRIANGLES);

	return mesh;
}


function correctBadMarkers(){
	 	for(var i=0;i<hovered_markers.length;i++){
	 		var bad_marker = hovered_markers[i];
	 		bad_marker.alpha = bad_marker.orig_options.alpha;
	 	}
	 	hovered_markers = [];
}


function drawPoints(){

	var line_geo = new PIXI.Geometry();
	line_geo.addAttribute('position', all_line_vertices, 2);
	line_geo.addAttribute('color', all_line_colors, 1);


		const vertexSrc = `

		    precision highp float;

		    attribute vec2 position;
		    attribute float color;

		    uniform mat3 translationMatrix;
		    uniform mat3 projectionMatrix;

		    varying float vColor;


		    void main() {
		    	gl_PointSize = 10.0;
		        gl_Position = vec4((projectionMatrix * translationMatrix * vec3(position, 1.0)).xy, 0.0, 1.0);
		        vColor = color;
		    }`;


		const fragmentSrc = `

		    precision highp float;

		    varying float vColor;

	        vec3 unpackColor(float f) {
			    vec3 color;
			    color.b = floor(f / 256.0 / 256.0);
			    color.g = floor((f - color.b * 256.0 * 256.0) / 256.0);
			    color.r = floor(f - color.b * 256.0 * 256.0 - color.g * 256.0);
			    return color / 255.0;
			}


		    void main() {

		        gl_FragColor = vec4(unpackColor(vColor),1.0);
		    }

		    `;

		var shader =  PIXI.Shader.from (vertexSrc, fragmentSrc);
		var mesh =  new PIXI.Mesh(line_geo, shader,null, PIXI.DRAW_MODES.POINTS);

	return mesh;

}



this.completeDraw = function(){


	that.markerContainer.removeChildren();	
	that.polyContainer.removeChildren();
	that.lineContainer.removeChildren();

	 jQuery(".leaflet-pane.leaflet-marker-pane > div").remove();

	 all_line_vertices = [];
	 all_line_colors = [];
	 all_thick_line_colors = [];
	 all_poly_vertices = [];
	 all_line_thick_vertices = [];
	 all_thick_normals = [];
	 all_poly_colors = [];
	 all_poly_alphas = [];
	 all_poly_ids = [];
	 all_thickline_ids = [];
	 all_thickhover_linewidths = [];

 	 currentPolygonID=0;

 	  that.piximarkers.sort(compareZIndex);
   	  that.pixipolygons.sort(compareZIndex);



	//VERTICES WILL BE ADDED IN addPixiPolygonToBuffers 

	for(var i=0; i<that.pixipolygons.length;i++){
		var pixipolygon = that.pixipolygons[i];		
		that.addPixiPolygonToBuffers(pixipolygon,false);	


	// FILL HOLES WITH LINE OUTLINE

		if(pixipolygon.totalholes && pixipolygon.totalholes.length>0){

			for(var j=0; j<pixipolygon.totalholes.length;j++){
				var hole = pixipolygon.totalholes[j];
				that.addPixiPolygonToBuffers(pixipolygon,hole);	
			}
		}	

	}


	for(var i=0; i<that.pixilines.length;i++){
		var pixiline = that.pixilines[i];		
		that.addPixiPolygonToBuffers(pixiline,false);	
	}
	
	
	var poly_mesh = drawAllPolygons();
	that.polyContainer.addChild(poly_mesh);



	var line_mesh = drawAllLines();
	that.lineContainer.addChild(line_mesh);



	var thickline_mesh = drawAllThickLines();
    that.lineContainer.addChild(thickline_mesh);


	for(var i=0; i<that.piximarkers.length;i++){

					var marker = that.piximarkers[i];
					marker.currentScale = marker.scale.x;
					marker.targetScale = 1 / that.scale;
					that.markerContainer.addChild(marker);
	}


	if(that.piximarkers.length>0){
					that.globalCurrentScale = that.piximarkers[0].scale.x;
					that.globalTragetscale  =  1 / that.scale;
	}



	that.renderer.render(that.container);



	//UPDATE TEST (NOT WORKING)

	// setTimeout(function() {

	// 	for(var i=0; i<all_poly_colors.length;i++){
	// 			all_poly_colors[i] = packColor(hexToRgb("0x000000"));
	// 	}

	// 	var geo = poly_mesh.geometry;
	// 	var att_id = geo.getAttribute("color").buffer;
	// 	var buffer = geo.buffers[att_id];
	// 	buffer.update(all_poly_colors);

	// 	console.log(buffer);
	// 	// that.polyContainer.removeChild(poly_mesh);
	// 	// that.polyContainer.addChild(poly_mesh);

	// 	that.renderer.render(that.container); 


	// }, 2000);

};


 function inside(point, vs) {
	 
	    var x = point[0], y = point[1];

	    var inside = false;
	    for (var i = 0, j = vs.length - 1; i < vs.length; j = i++) {
	        var xi = vs[i].lat, yi = vs[i].lng;
	        var xj = vs[j].lat, yj = vs[j].lng;

	        var intersect = ((yi > y) != (yj > y))
	            && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);
	        if (intersect) inside = !inside;
	    }

	    return inside;
	};


} // overlay



function compareZIndex( a, b ) {
  if ( a.zIndex < b.zIndex ){
    return -1;
  }
  if ( a.zIndex > b.zIndex ){
    return 1;
  }
  return 0;
}










	



